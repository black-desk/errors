@startuml
class "errors::source_location" as C_0012375714923122584580
class C_0012375714923122584580 {
+source_location() noexcept = default : void
-source_location(const char * file, const char * function, uint_least32_t line, uint_least32_t column) noexcept : void
..
+column() constexpr const noexcept : std::uint_least32_t
{static} +current(const char * fileName = __builtin_FILE(), const char * functionName = __builtin_FUNCTION(), const uint_least32_t lineNumber = __builtin_LINE(), const uint_least32_t columnOffset = __builtin_COLUMN()) constexpr noexcept : source_location
+file_name() constexpr const noexcept : const char *
+function_name() constexpr const noexcept : const char *
+line() constexpr const noexcept : uint_least32_t
__
-column_ : std::uint_least32_t
-file_name_ : const char *
-function_name_ : const char *
-line_number : std::uint_least32_t
}
abstract "errors::with_cause" as C_0012023759484702198364
abstract C_0012023759484702198364 {
{abstract} +cause() const noexcept = 0 : const std::unique_ptr<error> &
{abstract} +cause() noexcept = 0 : std::unique_ptr<error> &
__
}
abstract "errors::with_source_location" as C_0001972755341700835484
abstract C_0001972755341700835484 {
{abstract} +location() const noexcept = 0 : const source_location &
__
}
class "errors::error" as C_0004788455297566003677
class C_0004788455297566003677 {
+error() = default : void
+error(error &&) = deleted : void
+error(const error &) = deleted : void
..
+operator=(error &&) = deleted : error &
+operator=(const error &) = deleted : error &
..
+as<E>() const : const E *
+as<E>() : E *
+cause() : std::optional<std::unique_ptr<error>>
+is<E>() const : _Bool
+location() const : std::optional<source_location>
+type() : const std::type_info &
__
}
class "errors::base_error" as C_0008974991231937386567
class C_0008974991231937386567 {
+base_error(error_ptr && cause) : void
..
+cause() const noexcept : const std::unique_ptr<error> &
+cause() noexcept : std::unique_ptr<error> &
__
-cause_ : error_ptr
}
class "errors::message_error" as C_0002387234941834228668
class C_0002387234941834228668 {
+message_error(error_ptr && cause, const char * message) : void
+message_error(error_ptr && cause, std::string message) : void
..
+what() const noexcept : const char *
__
-message_ : std::optional<std::string>
}
class "errors::capture_location<T>" as C_0016190755569778038759
class C_0016190755569778038759 {
+capture_location(std::nullptr_t value) : void
+capture_location(T && value) : void
__
+value : T
}
C_0012023759484702198364 ..> C_0004788455297566003677
C_0001972755341700835484 ..> C_0012375714923122584580
C_0004788455297566003677 ..> C_0012375714923122584580
C_0008974991231937386567 o-- C_0004788455297566003677 : -cause_
C_0012023759484702198364 <|-- C_0008974991231937386567
C_0004788455297566003677 <|-- C_0008974991231937386567
C_0002387234941834228668 ..> C_0004788455297566003677
C_0008974991231937386567 <|-- C_0002387234941834228668

'Generated with clang-uml, version 0.5.4
'LLVM version Ubuntu clang version 18.1.3 (1ubuntu1)
@enduml
